{"version":3,"file":"isTransparent.js","sources":["../../../src/isTransparent.ts"],"sourcesContent":["import { type FabricObject } from 'fabric';\n\nlet messageID = -1;\n\nconst isImageDataTransparent = (imageData: ImageData) =>\n  imageData.data.every((x, i) => i % 4 !== 3 || x === 0);\n\nfunction isTransparent(object: FabricObject, worker?: Worker) {\n  // should also move to offscreen\n  const canvas = object.toCanvasElement({\n    // multiplier: 0.1,\n    enableRetinaScaling: false,\n    viewportTransform: false,\n    withoutTransform: true,\n    withoutShadow: true,\n  });\n\n  const id = ++messageID;\n  return new Promise<boolean>((resolve, reject) => {\n    const imageData = canvas\n      .getContext('2d')\n      ?.getImageData(0, 0, canvas.width, canvas.height);\n\n    if (!imageData) {\n      reject();\n    } else if (!worker) {\n      resolve(isImageDataTransparent(imageData));\n    } else {\n      const messageHandler = (\n        e: MessageEvent<{ messageID: number; isTransparent: boolean }>\n      ) => {\n        if (e.data.messageID === id) {\n          worker.removeEventListener('message', messageHandler);\n          resolve(e.data.isTransparent);\n        }\n      };\n      worker.addEventListener('message', messageHandler);\n      worker.postMessage(\n        {\n          imageData,\n          messageID: id,\n        },\n        []\n      );\n    }\n  });\n}\n\nisTransparent.installWorker = function installWorker() {\n  addEventListener(\n    'message',\n    (e: MessageEvent<{ imageData: ImageData; messageID: number }>) => {\n      const { imageData, messageID } = e.data;\n      postMessage({\n        isTransparent: isImageDataTransparent(imageData),\n        messageID,\n      });\n    }\n  );\n};\n\nexport { isTransparent };\n"],"names":["messageID","isImageDataTransparent","imageData","data","every","x","i","isTransparent","object","worker","canvas","toCanvasElement","enableRetinaScaling","viewportTransform","withoutTransform","withoutShadow","id","Promise","resolve","reject","_canvas$getContext","getContext","getImageData","width","height","messageHandler","e","removeEventListener","addEventListener","postMessage","installWorker","_e$data"],"mappings":"AAEA,IAAIA,SAAS,GAAG,CAAC,CAAC,CAAA;AAElB,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAIC,SAAoB,EAAA;EAAA,OAClDA,SAAS,CAACC,IAAI,CAACC,KAAK,CAAC,UAACC,CAAC,EAAEC,CAAC,EAAA;IAAA,OAAKA,CAAC,GAAG,CAAC,KAAK,CAAC,IAAID,CAAC,KAAK,CAAC,CAAA;GAAC,CAAA,CAAA;AAAA,CAAA,CAAA;AAExD,SAASE,aAAaA,CAACC,MAAoB,EAAEC,MAAe,EAAE;AAC5D;AACA,EAAA,IAAMC,MAAM,GAAGF,MAAM,CAACG,eAAe,CAAC;AACpC;AACAC,IAAAA,mBAAmB,EAAE,KAAK;AAC1BC,IAAAA,iBAAiB,EAAE,KAAK;AACxBC,IAAAA,gBAAgB,EAAE,IAAI;AACtBC,IAAAA,aAAa,EAAE,IAAA;AACjB,GAAC,CAAC,CAAA;EAEF,IAAMC,EAAE,GAAG,EAAEhB,SAAS,CAAA;AACtB,EAAA,OAAO,IAAIiB,OAAO,CAAU,UAACC,OAAO,EAAEC,MAAM,EAAK;AAAA,IAAA,IAAAC,kBAAA,CAAA;AAC/C,IAAA,IAAMlB,SAAS,GAAA,CAAAkB,kBAAA,GAAGV,MAAM,CACrBW,UAAU,CAAC,IAAI,CAAC,MAAAD,IAAAA,IAAAA,kBAAA,KADDA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,kBAAA,CAEdE,YAAY,CAAC,CAAC,EAAE,CAAC,EAAEZ,MAAM,CAACa,KAAK,EAAEb,MAAM,CAACc,MAAM,CAAC,CAAA;IAEnD,IAAI,CAACtB,SAAS,EAAE;AACdiB,MAAAA,MAAM,EAAE,CAAA;AACV,KAAC,MAAM,IAAI,CAACV,MAAM,EAAE;AAClBS,MAAAA,OAAO,CAACjB,sBAAsB,CAACC,SAAS,CAAC,CAAC,CAAA;AAC5C,KAAC,MAAM;AACL,MAAA,IAAMuB,cAAc,GAAG,SAAjBA,cAAcA,CAClBC,CAA8D,EAC3D;AACH,QAAA,IAAIA,CAAC,CAACvB,IAAI,CAACH,SAAS,KAAKgB,EAAE,EAAE;AAC3BP,UAAAA,MAAM,CAACkB,mBAAmB,CAAC,SAAS,EAAEF,cAAc,CAAC,CAAA;AACrDP,UAAAA,OAAO,CAACQ,CAAC,CAACvB,IAAI,CAACI,aAAa,CAAC,CAAA;AAC/B,SAAA;OACD,CAAA;AACDE,MAAAA,MAAM,CAACmB,gBAAgB,CAAC,SAAS,EAAEH,cAAc,CAAC,CAAA;MAClDhB,MAAM,CAACoB,WAAW,CAChB;AACE3B,QAAAA,SAAS,EAATA,SAAS;AACTF,QAAAA,SAAS,EAAEgB,EAAAA;OACZ,EACD,EACF,CAAC,CAAA;AACH,KAAA;AACF,GAAC,CAAC,CAAA;AACJ,CAAA;AAEAT,aAAa,CAACuB,aAAa,GAAG,SAASA,aAAaA,GAAG;AACrDF,EAAAA,gBAAgB,CACd,SAAS,EACT,UAACF,CAA4D,EAAK;AAChE,IAAA,IAAAK,OAAA,GAAiCL,CAAC,CAACvB,IAAI;MAA/BD,SAAS,GAAA6B,OAAA,CAAT7B,SAAS;MAAEF,SAAS,GAAA+B,OAAA,CAAT/B,SAAS,CAAA;AAC5B6B,IAAAA,WAAW,CAAC;AACVtB,MAAAA,aAAa,EAAEN,sBAAsB,CAACC,SAAS,CAAC;AAChDF,MAAAA,SAAS,EAATA,SAAAA;AACF,KAAC,CAAC,CAAA;AACJ,GACF,CAAC,CAAA;AACH,CAAC;;;;"}